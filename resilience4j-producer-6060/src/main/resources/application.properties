spring.application.name=resilience4j-producer-6060

server.port=6060

# Configure whether Eureka prefers to register instances using IP addresses rather than hostnames.
eureka.instance.prefer-ip-address=true

# Set the IP address that the Eureka server will use to register the service instance.
eureka.instance.ip-address=172.20.10.9

# Specify the URL of the Eureka server where the client will register.
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.ip-address}:8761/eureka/

# Set the interval in seconds at which the Eureka client sends heartbeats to the Eureka server to maintain service instance lease.
eureka.instance.lease-renewal-interval-in-seconds=10

# If the Eureka server does not receive a heartbeat from a particular instance within 30 seconds, the instance will be removed from the registry.
eureka.instance.lease-expiration-duration-in-seconds=30

# Set the interval in seconds at which the Eureka client fetches service registration information from the server.
eureka.client.registry-fetch-interval-seconds=10

# Enable health checks to allow the Eureka server to obtain the health status of service instances.
eureka.client.healthcheck.enabled=true

# Expose all management endpoints.
management.endpoints.web.exposure.include=*

# Always show detailed health check information.
management.endpoint.health.show-details=always

# Enable the environment information endpoint.
management.info.env.enabled=true

# Enable health indicators for circuit breakers.
# http://localhost:8080/actuator/health
management.health.circuitbreakers.enabled=true

# Endpoint for Eureka /actuator/info
info.app.name=${spring.application.name}

# Circuit Breaker basic configuration
# Enable health indicator registration for circuit breakers; allows viewing circuit breaker status through monitoring endpoints.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.registerHealthIndicator=true

# Set the size of the sliding window used to record the number of successful and failed calls to determine when to trigger the circuit breaker.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.slidingWindowSize=10

# Minimum number of calls that must be made before the circuit breaker considers opening. Prevents opening the circuit breaker too early.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.minimumNumberOfCalls=5

# Time to wait in milliseconds after the circuit breaker opens before entering half-open state, allowing some requests to pass through to check if the system has recovered.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.waitDurationInOpenState=10000

# Failure rate threshold that triggers opening the circuit breaker. If the failure rate within the sliding window exceeds this value, the circuit breaker opens. Expressed as a percentage, e.g., 50 for 50%.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.failureRateThreshold=50

# Size of the ring buffer used for listening to and caching circuit breaker events. This allows the application to collect and monitor circuit breaker event data.
resilience4j.circuitbreaker.instances.employeeCircuitBreaker.eventConsumerBufferSize=10
